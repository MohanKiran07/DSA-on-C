#include<stdio.h>
#include<stdbool.h>

#define MAX 100

int front = -1, rear = -1, queue[MAX];

bool isEmpty() {
    return (front == -1 && rear == -1);
}

bool isFull() {
    return (rear == MAX - 1);
}

void enqueue(int item) {
    if (isFull()) {
        printf("Queue is Overflow\n");
        return;
    }
    if (isEmpty()) {
        front = rear = 0;
    } else {
        rear++;
    }
    queue[rear] = item;
    printf("%d is Enqueued into the queue\n", item);
}

void dequeue() {
    if (isEmpty()) {
        printf("Queue is Underflow\n");
        return;
    }
    printf("%d is Dequeued from the queue\n", queue[front]);
    if (front == rear) {
        front = rear = -1;
    } else {
        front++;
    }
}

void peek() {
    if (isEmpty()) {
        printf("Queue is Underflow\n");
        return;
    }
    printf("The Last/Rear Element is %d\n", queue[rear]);
}

void display() {
    if (isEmpty()) {
        printf("Queue is empty\n");
        return;
    }
    printf("\nQUEUE:\n====================\n");
    for (int i = front; i <= rear; i++) {
        printf("%d ", queue[i]);
    }
    printf("\n====================\n");
}

int main() {
    int item, choice;
    do {
        printf("\n1. Enqueue\n2. Dequeue\n3. Peek\n4. Display\n0. Exit\nEnter your Choice: ");
        scanf("%d", &choice);
        switch (choice) {
            case 1:
                printf("Enter Value: ");
                scanf("%d", &item);
                enqueue(item);
                break;
            case 2:
                dequeue();
                break;
            case 3:
                peek();
                break;
            case 4:
                display();
                break;
            case 0:
                printf("Exiting!\n");
                break;
            default:
                printf("Invalid Choice\n");
        }
    } while (choice != 0);

    return 0;
}
