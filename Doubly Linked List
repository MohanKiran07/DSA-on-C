#include <stdio.h>
#include <stdlib.h>

struct node {
    int data;
    struct node *prev;
    struct node *next;
};

// Function to create a new node
struct node *createNode(int data) {
    struct node *newNode = (struct node *)malloc(sizeof(struct node));
    if (newNode == NULL) {
        printf("Memory allocation failed.\n");
        exit(1);
    }
    newNode->data = data;
    newNode->next = NULL;
    newNode->prev = NULL;
    return newNode;
}

// Insert at the beginning of the list
void insertBeginning(struct node **head, int data) {
    struct node *newNode = createNode(data);
    newNode->next = *head;
    if (*head != NULL) {
        (*head)->prev = newNode;
    }
    *head = newNode;
}

// Insert at the end of the list
void insertEnd(struct node **head, int data) {
    struct node *newNode = createNode(data);
    if (*head == NULL) {
        *head = newNode;
        return;
    }
    struct node *temp = *head;
    while (temp->next != NULL) {
        temp = temp->next;
    }
    temp->next = newNode;
    newNode->prev = temp;
}

// Insert at a specific position in the list
void insertPosition(struct node **head, int data, int position) {
    if (position < 1) {
        printf("Invalid position.\n");
        return;
    } else if (position == 1) {
        insertBeginning(head, data);
        return;
    } else {
        struct node *newNode = createNode(data);
        struct node *temp = *head;
        int count = 1;
        while (count < position - 1 && temp != NULL) {
            temp = temp->next;
            count++;
        }
        if (temp == NULL) {
            printf("Position out of range.\n");
            return;
        }
        newNode->next = temp->next;
        newNode->prev = temp;
        if (temp->next != NULL) {
            temp->next->prev = newNode;
        }
        temp->next = newNode;
    }
}

// Delete the first node of the list
void deleteBeginning(struct node **head) {
    if (*head == NULL) {
        printf("List is empty.\n");
        return;
    }
    struct node *temp = *head;
    *head = temp->next;
    if (*head != NULL) {
        (*head)->prev = NULL;
    }
    free(temp);
}

// Delete the last node of the list
void deleteEnd(struct node **head) {
    if (*head == NULL) {
        printf("List is empty.\n");
        return;
    }
    struct node *temp = *head;
    while (temp->next != NULL) {
        temp = temp->next;
    }
    if (temp->prev != NULL) {
        temp->prev->next = NULL;
    } else {
        *head = NULL;
    }
    free(temp);
}

// Delete node at a specific position in the list
void deletePosition(struct node **head, int position) {
    if (position < 1) {
        printf("Invalid position.\n");
        return;
    }
    if (position == 1) {
        deleteBeginning(head);
        return;
    }
    struct node *temp = *head;
    int count = 1;
    while (count < position && temp != NULL) {
        temp = temp->next;
        count++;
    }
    if (temp == NULL) {
        printf("Position out of range.\n");
        return;
    }
    if (temp->next != NULL) {
        temp->prev->next = temp->next;
        temp->next->prev = temp->prev;
    } else {
        temp->prev->next = NULL;
    }
    free(temp);
}

// Display the list
void display(struct node *head) {
    struct node *temp = head;
    printf("\n~~~~~~~~~~~~~~~~~~~\n");
    while (temp != NULL) {
        printf("%d    ", temp->data);
        temp = temp->next;
    }
    printf("\n~~~~~~~~~~~~~~~~~~~\n\n");
}

int main() {
    struct node *head = NULL;
    int choice, data, position;

    do {
        printf("Enter data for the node: ");
        scanf("%d", &data);
        insertEnd(&head, data);
        printf("Do you want to insert more nodes? (1 for Yes, 0 for No): ");
        scanf("%d", &choice);
    } while (choice == 1);

    printf("\n~~~~~~~~~~~~~~~~~~\nOperations\n1. Insert at beginning\n2. Insert at end\n3. Insert at specific position\n4. Delete at beginning\n5. Delete at end\n6. Delete at specific position\n7. Display\n0. Exit\n~~~~~~~~~~~~~~~~~~\n\n");

    while (1) {
        printf("Enter your choice: ");
        scanf("%d", &choice);
        switch (choice) {
            case 1:
                printf("Enter data for the node: ");
                scanf("%d", &data);
                insertBeginning(&head, data);
                printf("Linked List after insertion:\n");
                display(head);
                break;

            case 2:
                printf("Enter data for the node: ");
                scanf("%d", &data);
                insertEnd(&head, data);
                printf("Linked List after insertion:\n");
                display(head);
                break;

            case 3:
                printf("Enter data for the node: ");
                scanf("%d", &data);
                printf("Enter the position: ");
                scanf("%d", &position);
                insertPosition(&head, data, position);
                printf("Linked List after insertion:\n");
                display(head);
                break;

            case 4:
                deleteBeginning(&head);
                printf("Linked List after deletion:\n");
                display(head);
                break;

            case 5:
                deleteEnd(&head);
                printf("Linked List after deletion:\n");
                display(head);
                break;

            case 6:
                printf("Enter the position: ");
                scanf("%d", &position);
                deletePosition(&head, position);
                printf("Linked List after deletion:\n");
                display(head);
                break;

            case 7:
                display(head);
                break;

            case 0:
                exit(0);

            default:
                printf("Invalid choice.\n");
        }
    }

    return 0;
}
