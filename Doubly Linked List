#include<stdio.h>
#include<stdlib.h>


struct node
{
    int d;
    struct node*prev;
    struct node*next;
};


struct node*create(int d)
{
    struct node*nn=(struct node*)malloc(sizeof(struct node));
    if(nn==NULL)
    {
        printf("Fail");
        exit(1);
    }
    nn->d=d;
    nn->next=NULL;
    nn->prev=NULL;
    return nn;
}


void IB(struct node**h,int d)
{
    struct node*nn=create(d);
    nn->next=*h;
    if(*h!=NULL)
    {
        (*h)->prev=nn;
    }
    *h=nn;
}

        
void IE(struct node**h,int d)  
{
    struct node*nn=create(d);
    if(*h==NULL)
    {
         *h=nn;
         return;
    }  
    struct node*t=*h;
    while(t->next!=NULL)
    {
        t=t->next;
    }
    t->next=nn;
    nn->prev=t;
}
    
               
void IP(struct node**h,int d,int p)
{
    if(p<1)
    {
        printf("Invalid Position");
        return;
    }
    else if(p==1)
    {
        IB(h,d);
        return;
    }
    else
    {
        struct node*nn=create(d);
        struct node*t=*h;
        for(int i=1;i<p-1 && t!=NULL;i++)
        {
            t=t->next;
        }
      nn->next=t->next;
      nn->prev=t;
      if(t->next!=NULL)
      {
          t->next->prev=nn;
      }
      t->next=nn;
      }
}


void DB(struct node**h)
{
    struct node*t=*h;
    if(t->next!=NULL)
    {
        *h=t->next;
        t->prev=*h;
        free(t);
    }
    else
    {
        *h=NULL;
    }
}


void DE(struct node**h)
{
    struct node*t=*h;
    while(t->next!=NULL)
    {
        t=t->next;
    }
    if(t->prev!=NULL)
    {
        t->prev->next=NULL;
        free(t);
    }
    else
    {
        *h=NULL;
        free(t);
    }
}


void DP(struct node**h,int p)
{
    if(p<1)
    {
        printf("Invalid Position");
        return;
    }
    else if(p==1)
    {
        DB(h);
    }
    else
    {
        struct node*t=*h;
        int c=1;
        while(t!=NULL && c<p)
        {
            t=t->next;
            c++;
        }
        if(t->next!=NULL)
        {
            t->prev->next=t->next;
        }
        else if(t->next==NULL)
        {
            DE(h);
        }
        else
        {
            *h=NULL;
        }
        free(t);
    }
}


 void display(struct node**head)
 {
        struct node*t=*head;
        printf("\n~~~~~~~~~~~~~~~~~~~\n");
        while(t!=NULL)
        {
            printf("%d    ",t->d);
            t=t->next;
        }
        printf("\n~~~~~~~~~~~~~~~~~~~\n\n");
 }

int main()   
{
           struct node*h=NULL,*nn=NULL,*t=NULL;
           int c,d,x,k,p;
           do{
               printf("Enter Data into the Node:");
               scanf("%d",&d) ;
               create(d);
               IE(&h,d);
               printf("Do u want to Insert More?:");
               scanf("%d",&c);
               }while(c==1);
     
               printf("\n~~~~~~~~~~~~~~~~~~\nOperations\n1.Insert at biginning\n2.insert at End\n3.Insert at specific position\n4.Delete at biginning\n5.Delete at End\n6.Delete at specific Position\n7.Search Operation\n8.Reverse Operation\n9.Remove Duplicates\n10.Sort the Linked List\n11.Length of Linked List\n12.Display\n13.Split\n0.Exit\n~~~~~~~~~~~~~~~~~~\n\n");
               while(1)
               {
                   printf("Enter your Choice:");
               scanf("%d",&x);
                   switch(x)
                   {
                       case 1:
                       printf("Enter Data into the Node:\n");
                       scanf("%d",&d);
                       IB(&h,d);
                       printf("Linked List After Insertion\n");
                       display(&h);
                       break;
                       
                       case 2:
                       printf("Enter Data into the Node:\n");
                       scanf("%d",&d);
                       IE(&h,d);
                       printf("Linked List After Insertion\n");
                       display(&h);
                       break;
                       
                       case 3:
                       printf("Enter Data into the Node:\n");
                       scanf("%d",&d);
                       printf("Enter the position:\n");
                       scanf("%d",&p);
                       IP(&h,d,p);
                       printf("Linked List After Insertion\n");
                       display(&h);
                       break;
                       
                       case 4:
                       DB(&h);
                       printf("Linked List After Deletion\n");
                       display(&h);
                       break;
                       
                       case 5:
                       DE(&h);
                       printf("Linked List After Deletion\n");
                       display(&h);
                       break;
                       
                        case 6:
                       printf("Enter the position:\n");
                       scanf("%d",&p);
                       DP(&h,p);
                       printf("Linked List After Deletion\n");
                       display(&h);
                       break;
                       
                       
                       default:
                       printf("Invalid\n");
                   }
               }
}
               
