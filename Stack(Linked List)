#include <stdio.h>
#include <stdlib.h>

// Node structure for linked list implementation of stack
struct Node {
    int data;
    struct Node *next;
};

// Stack structure to hold top pointer
struct Stack {
    struct Node *top;
};

// Function to create a new node
struct Node* createNode(int data) {
    struct Node *newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

// Function to create an empty stack
struct Stack* createStack() {
    struct Stack *stack = (struct Stack*)malloc(sizeof(struct Stack));
    stack->top = NULL;
    return stack;
}

// Function to check if the stack is empty
int isEmpty(struct Stack *stack) {
    return (stack->top == NULL);
}

// Function to push an element onto the stack
void push(struct Stack *stack, int data) {
    struct Node *newNode = createNode(data);
    newNode->next = stack->top;
    stack->top = newNode;
    printf("%d is Pushed into the Stack\n", data);
}

// Function to pop an element from the stack
int pop(struct Stack *stack) {
    if (isEmpty(stack)) {
        printf("Stack is Underflow\n");
        return -1;
    }
    struct Node *temp = stack->top;
    int poppedValue = temp->data;
    stack->top = temp->next;
    free(temp);
    printf("%d is Popped from the Stack\n", poppedValue);
    return poppedValue;
}

// Function to peek at the top element of the stack
int peek(struct Stack *stack) {
    if (isEmpty(stack)) {
        printf("Stack is Underflow\n");
        return -1;
    }
    printf("Top element of the Stack is %d\n", stack->top->data);
    return stack->top->data;
}

// Function to display the elements of the stack
void display(struct Stack *stack) {
    if (isEmpty(stack)) {
        printf("Stack is Underflow\n");
        return;
    }
    struct Node *temp = stack->top;
    printf("STACK:\n==========\n");
    while (temp != NULL) {
        printf("%d    ", temp->data);
        temp = temp->next;
    }
    printf("\n==========\n");
}

// Main function to demonstrate stack operations
int main() {
    struct Stack *stack = createStack();
    int value, choice;
    
    printf("Stack Operations:\n1. Push\n2. Pop\n3. Peek\n4. Display\n0. Exit\n");

    do {
        printf("Enter your Choice:");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Enter Value to Push into Stack:");
                scanf("%d", &value);
                push(stack, value);
                break;
            case 2:
                pop(stack);
                break;
            case 3:
                peek(stack);
                break;
            case 4:
                display(stack);
                break;
            case 0:
                printf("Exit!\n");
                break;
            default:
                printf("\nInvalid Choice\n");
        }
    } while (choice != 0);

    return 0;
}
